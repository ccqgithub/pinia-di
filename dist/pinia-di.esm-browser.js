import{defineComponent as t,inject as r,provide as e,getCurrentInstance as o}from"vue";const n=Symbol("Injector Key"),s=Symbol("Instance Injector Key");class i{constructor(t,r){this.parent=null,this.records=new Map;const{parent:e=null}=r;this.parent=e,t.forEach((t=>{let r=null;if("object"==typeof t)r=Object.assign({},t);else if("function"==typeof t){r={creator:t}}if(!r)throw new Error(`Error provider onfig [${t.toString()}]!`);this.records.set(r.creator,r)}))}get(t,r){const e=this.records.get(t);let o=null;if(e?(void 0===e.use&&this._initRecord(e),o=e.use||null):this.parent&&(o=this.parent.get(t,r)),!o&&!(null==r?void 0:r.optional))throw new Error("Store not be provided, and not optional!");return o}_initRecord(t){t.use=t.creator({getStore:(t,r)=>this.get(t,r)})()}}class l{constructor(t,r){this.parent=null,this.records=new Map;const{parent:e=null}=r;this.parent=e,t.forEach((t=>{let r=null;if("object"==typeof t)r=Object.assign({},t);else if("function"==typeof t){r={creator:t}}if(!r)throw new Error(`Error provider onfig [${t.toString()}]!`);this.records.set(r.creator,r)}))}get(t,r){const e=this.records.get(t);let o=null;if(e?(void 0===e.use&&this._initRecord(e),o=e.use||null):this.parent&&(o=this.parent.get(t,r)),!o&&!(null==r?void 0:r.optional))throw new Error("Store not be provided, and not optional!");return o}_initRecord(t){t.use=t.creator({getStore:(t,r)=>this.get(t,r)})()}}const c=t({props:{stores:{type:Object,required:!0}},setup(t){const o=r(n),s=new l(t.stores,{parent:o||null});e(n,s)}}),a=t=>{const l=o(),c=r(n,null),a=new i(t.stores,{parent:c});l[s]=a,e(n,a)},p=(t,e)=>{const i=o()[s]||r(n,null);if(!i){if(!e||!e.optional)throw new Error("Never register any injector√•!");return null}return i.get(t,e)};export{i as Injector,c as StoreProvider,n as injectorKey,s as instanceInjectorKey,a as provideStores,p as useStore};
