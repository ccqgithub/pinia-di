import{inject as e,provide as t,onUnmounted as r,defineComponent as o}from"vue";let n=0;class s{constructor(e,t={}){this.id="",this.name="",this.providers=[],this.parent=null,this.records=new Map;const{parent:r=null,oldInjector:o=null,name:s=""}=t;this.id=""+n++,this.name=s,this.parent=r;const i=(null==o?void 0:o.providers)||[],c=[];e.forEach((e=>{const t="object"==typeof e?e.creator:e,r=i.find((e=>e===t||e.creator===t));if(r){const t="object"==typeof r?r:{creator:r},n="object"==typeof e?e:{creator:e};if(n.creator===t.creator&&n.use===t.use)return c.push(n.creator),void this.records.set(n.creator,o.records.get(n.creator))}let n=null;if("object"==typeof e)n=Object.assign({},e);else if("function"==typeof e){n={creator:e}}if(!n)throw new Error(`Error provider onfig [${e.toString()}]!`);this.records.set(n.creator,n)})),i.forEach((e=>{var t;const r="object"==typeof e?e.creator:e;if(c.includes(r))return;const n=null==o?void 0:o.records.get(r);null===(t=null==n?void 0:n.dispose)||void 0===t||t.call(n)})),this.providers=e}get(e,t){const r=this.records.get(e);let o=null;if(r?(void 0===r.use&&this._initRecord(r),o=(null==r?void 0:r.use)?null==r?void 0:r.use():null):this.parent&&(o=this.parent.get(e,t)),!o&&!(null==t?void 0:t.optional))throw new Error("Store not be provided, and not optional!");return o}_initRecord(e){const t={getStore:(e,t)=>this.get(e,t),onUnmounted:t=>{e.dispose=t},useStoreId:e=>this.name?`${e}~[${this.name}]~<${this.id}>`:`${e}~<${this.id}>`};e.use=e.creator(t)}dispose(){var e;const{records:t}=this,r=t.keys();for(const o of r){const r=null===(e=t.get(o))||void 0===e?void 0:e.dispose;r&&r()}}}const i=Symbol("Injector Key"),c=o=>{const n=e(i,null),c=new s(o.stores,{parent:n,oldInjector:null,name:o.name});return t(i,c),r((()=>{c.dispose()})),{getStore:(e,t)=>c.get(e,t)}};function l(t,r){const o=e(i,null);if(!o){if(!r||!r.optional)throw new Error(`Never register any injector for ${t.toString()}!`);return null}return o.get(t,r)}const d=(e,t="")=>{const r=new s(e,{name:t});return[i,r]},a=o({props:{stores:{type:Object,required:!0},name:{type:String,requred:!1}},setup(e){c({stores:e.stores,name:e.name})}});export{s as Injector,a as StoreProvider,d as getProvideArgs,i as injectorKey,c as useProvideStores,l as useStore};
