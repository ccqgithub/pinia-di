import{inject as t,provide as e,onUnmounted as r,defineComponent as o}from"vue";let n=0;class s{constructor(t,e={}){this.id="",this.name="",this.providers=[],this.parent=null,this.records=new Map;const{parent:r=null,oldInjector:o=null,name:s=""}=e;this.id=""+n++,this.name=s,this.parent=r;const i=(null==o?void 0:o.providers)||[],c=[];t.forEach((t=>{const e="object"==typeof t?t.creator:t,r=i.find((t=>t===e||t.creator===e));if(r){const e="object"==typeof r?r:{creator:r},n="object"==typeof t?t:{creator:t};if(n.creator===e.creator&&n.use===e.use)return c.push(n.creator),void this.records.set(n.creator,o.records.get(n.creator))}let n=null;if("object"==typeof t)n=Object.assign({},t);else if("function"==typeof t){n={creator:t}}if(!n)throw new Error(`Error provider onfig [${t.toString()}]!`);this.records.set(n.creator,n)})),i.forEach((t=>{var e;const r="object"==typeof t?t.creator:t;if(c.includes(r))return;const n=null==o?void 0:o.records.get(r);null===(e=null==n?void 0:n.dispose)||void 0===e||e.call(n)})),this.providers=t}get(t,e){const r=this.records.get(t);let o=null;if(r?(void 0===r.use&&this._initRecord(r),o=(null==r?void 0:r.use)?null==r?void 0:r.use():null):this.parent&&(o=this.parent.get(t,e)),!o&&!(null==e?void 0:e.optional))throw new Error(`Store<${t.toString()}> not be provided, and not optional!`);return o}_initRecord(t){const e={getStore:(t,e)=>this.get(t,e),onUnmounted:e=>{t.dispose=e},useStoreId:t=>this.name?`${t}~[${this.name}]~<${this.id}>`:`${t}~<${this.id}>`};t.use=t.creator(e)}dispose(){var t;const{records:e}=this,r=e.keys();for(const o of r){const r=null===(t=e.get(o))||void 0===t?void 0:t.dispose;r&&r()}}}const i=Symbol("Injector Key"),c=o=>{const n=t(i,null),c=new s(o.stores,{parent:n,oldInjector:null,name:o.name});return e(i,c),r((()=>{c.dispose()})),{getStore:(t,e)=>c.get(t,e)}};function l(e,r){const o=t(i,null);if(!o){if(!r||!r.optional)throw new Error(`Never register any injector for ${e.toString()}!`);return null}return o.get(e,r)}const d=(t,e="")=>{const r=new s(t,{name:e});return[i,r]},a=o({props:{stores:{type:Object,required:!0},name:{type:String,requred:!1}},setup(t){c({stores:t.stores,name:t.name})}});export{s as Injector,a as StoreProvider,d as getProvideArgs,i as injectorKey,c as useProvideStores,l as useStore};
