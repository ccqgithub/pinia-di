import{getCurrentInstance as t,inject as e,provide as n,onUnmounted as o,defineComponent as s}from"vue";import{getActivePinia as r}from"pinia";function i(t,e,n,o){return new(n||(n=Promise))((function(s,r){function i(t){try{c(o.next(t))}catch(e){r(e)}}function u(t){try{c(o.throw(t))}catch(e){r(e)}}function c(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,u)}c((o=o.apply(t,e||[])).next())}))}let u=0;class c{constructor(t,e={}){this.id="",this.name="",this.parent=null,this.records=new Map;const{parent:n=null,name:o=""}=e;this.id=""+u++,this.name=o,this.parent=n,t.forEach((t=>{let e=null;if("object"==typeof t)e=Object.assign(Object.assign({},t),{disposes:[],disposeOnUnmounted:!1!==t.disposeOnUnmounted});else if("function"==typeof t){e={creator:t,disposes:[],disposeOnUnmounted:!0}}if(!e)throw new Error(`Error provider onfig [${t.$id||t.toString()}]!`);this.records.set(e.creator,e)}))}get(t,e){const n=this.records.get(t);let o=null;if(n?(void 0===n.use&&this._initRecord(n),o=(null==n?void 0:n.use)?null==n?void 0:n.use():null):this.parent&&(o=this.parent.get(t,e)),!o&&!(null==e?void 0:e.optional))throw new Error(`Store<${t.$id||t.toString()}> not be provided, and not optional!`);return o}_initRecord(t){const e={getStore:(t,e)=>this.get(t,e),onUnmounted:e=>{t.disposes.push(e);return()=>{const n=t.disposes.indexOf(e);-1!==n&&t.disposes.splice(n,1)}},useStoreId:t=>this.name?`${t}~[${this.name}]~<${this.id}>`:`${t}~<${this.id}>`};t.use=t.creator(e)}dispose(){return i(this,void 0,void 0,(function*(){const{records:t}=this,e=t.keys();for(const n of e){const e=t.get(n);if(!e||!e.use)return;const o=r();if(!o)return;if(!o._s.has(e.use.$id))return;const s=(null==e?void 0:e.disposes)||[];for(const t of s)yield t();e.use().$dispose()}}))}}const d=Symbol("Injector Key"),l=s=>{const r=t(),i=e(d,null),u=new c(s.stores,{parent:i,name:s.name});return r&&(r.__PINIA_DI_INJECTOR__=u),n(d,u),o((()=>{u.dispose()})),{getStore:(t,e)=>u.get(t,e)}};function a(n,o){const s=t(),r=e(d,null),i=(null==s?void 0:s.__PINIA_DI_INJECTOR__)||r;if(!i){if(!o||!o.optional)throw new Error(`Never register any injector for ${n.$id||n.toString()}!`);return null}return i.get(n,o)}const p=(t,e="")=>{const n=new c(t,{name:e});return[d,n]},f=s({props:{stores:{type:Object,required:!0},name:{type:String,requred:!1}},setup(t){l({stores:t.stores,name:t.name})}});export{c as Injector,f as StoreProvider,p as getProvideArgs,d as injectorKey,l as useProvideStores,a as useStore};
